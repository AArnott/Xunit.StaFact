<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <!-- The first TFM to be listed is the lucky one that determines which files show up in Solution Explorer. -->
    <TargetFrameworks>net472;netstandard2.0;net6.0;net6.0-windows</TargetFrameworks>
    <!-- Exclude for Linux, which does not support building macOS projects
         (see https://github.com/xamarin/xamarin-macios/issues/17287). -->
    <TargetFrameworks Condition="!$([MSBuild]::IsOsPlatform('Linux'))">$(TargetFrameworks);net6.0-macos10.15</TargetFrameworks>
    <RootNamespace>Xunit</RootNamespace>

    <Description>Run your xunit-based tests on an STA thread with the WPF Dispatcher, a WinForms SynchronizationContext, or even a cross-platform generic UI thread emulation with a SynchronizationContext that keeps code running on a "main thread" for that test.

Simply use [WpfFact], [WinFormsFact], [StaFact] or the cross-platform [UIFact] on your test method to run your test under conditions that most closely match the main thread in your application.

Theory variants of these attributes allow for parameterized testing. Check out the xunit.combinatorial nuget package for pairwise or combinatorial testing with theories.</Description>
    <PackageTags>STA xunit testing unit WPF WinForms testing</PackageTags>
  </PropertyGroup>
  <ItemGroup Condition="'$(TargetingWindows)'!='true'">
    <Compile Remove="Sdk.WindowsDesktop\**" />
    <Compile Remove="WindowsDesktop\**" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetingMacos)'!='true'">
    <Compile Remove="Sdk.Mac\**" />
    <Compile Remove="Mac\**" />
  </ItemGroup>
  <ItemGroup>
    <AdditionalFiles Include="$(TargetFramework)\PublicAPI.Shipped.txt" />
    <AdditionalFiles Include="$(TargetFramework)\PublicAPI.Unshipped.txt" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="xunit.extensibility.execution" />
    <PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" PrivateAssets="all" />
  </ItemGroup>
</Project>
