steps:

- download: current
  artifact: deployables-Windows
  displayName: Download Xunit.StaFact package

- pwsh: |
    try {
      dotnet nuget add source "$(Pipeline.Workspace)/deployables-Windows" -n "Pipeline Artifacts"
      $version = & (./azure-pipelines/Get-nbgv.ps1) get-version -v NuGetPackageVersion -p src/Xunit.StaFact
      echo "Installing Xunit.StaFact versions $version"
      dotnet add test/Xunit.StaFact.Tests.ConsumedPackage package Xunit.StaFact -v $version
    } catch {
      write-host $_
      exit 1
    }
  displayName: Install Xunit.StaFact package

- task: DotNetCoreCLI@2
  displayName: dotnet test -f netcoreapp2.1
  inputs:
    command: test
    arguments: -c $(BuildConfiguration) -f netcoreapp2.1 --filter "TestCategory!=FailureExpected" -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings"
    testRunTitle: netcoreapp2.1-$(Agent.JobName)
    workingDirectory: test/Xunit.StaFact.Tests.ConsumedPackage

- task: DotNetCoreCLI@2
  displayName: dotnet test -f netcoreapp3.1
  inputs:
    command: test
    arguments: -c $(BuildConfiguration) -f netcoreapp3.1 --filter "TestCategory!=FailureExpected" -v n /p:CollectCoverage=true --settings "$(Build.Repository.LocalPath)/azure-pipelines/$(Agent.OS).runsettings"
    testRunTitle: netcoreapp3.1-$(Agent.JobName)
    workingDirectory: test/Xunit.StaFact.Tests.ConsumedPackage

- task: PowerShell@2
  inputs:
    filePath: azure-pipelines/artifacts/_pipelines.ps1
    arguments: -ArtifactNameSuffix "-$(Agent.JobName)"
  displayName: Publish artifacts
  condition: succeededOrFailed()

- bash: bash <(curl -s https://codecov.io/bash)
  displayName: Publish code coverage results to codecov.io
  condition: ne(variables['codecov_token'], '')
  timeoutInMinutes: 3
  continueOnError: true
